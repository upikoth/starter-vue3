/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
  '/api/v1/health': {
    /** @description Проверка работоспособности приложения */
    get: {
      responses: {
        /** @description Приложение работает */
        200: components['responses']['defaultSuccess'];
      };
    };
  };
  '/api/v1/session': {
    /** @description Получение информации о текущей сессии пользователя */
    get: {
      responses: {
        /** @description Информация о текущей сессии пользователя */
        200: components['responses']['sessionsGetCurrentSessionSuccess'];
        /** @description Пользователь не авторизован */
        401: components['responses']['defaultNotAuthorized'];
      };
    };
  };
  '/api/v1/sessions': {
    /** @description Получение информации обо всех сессиях в приложении */
    get: {
      parameters: {
        query?: {
          limit?: components['parameters']['limitParameter'];
          offset?: components['parameters']['offsetParameter'];
        };
      };
      responses: {
        /** @description Список всех сессий */
        200: components['responses']['sessionsGetAllSessionSuccessResponse'];
        /** @description Пользователь не авторизован */
        401: components['responses']['defaultNotAuthorized'];
        /** @description Недостаточно прав */
        403: components['responses']['defaultForbidden'];
      };
    };
    /** @description Создание сессии пользователя по логину и паролю */
    post: {
      requestBody: components['requestBodies']['sessionsCreateSessionBodyRequest'];
      responses: {
        /** @description Сессия успешно создана */
        200: components['responses']['sessionsCreateSessionSuccessResponse'];
        /** @description Переданы некорректные логин или пароль */
        400: components['responses']['sessionsCreateSessionWrongData'];
      };
    };
  };
  '/api/v1/sessions/{id}': {
    /** @description Удаление сессии пользователя по id */
    delete: {
      parameters: {
        path: {
          id: components['parameters']['defaultId'];
        };
      };
      responses: {
        /** @description Сессия успешно удалена */
        200: components['responses']['defaultSuccess'];
        /** @description Ошибки при удалении сессии */
        400: components['responses']['sessionDeleteSessionError'];
        /** @description Пользователь не авторизован */
        401: components['responses']['defaultNotAuthorized'];
        /** @description Недостаточно прав */
        403: components['responses']['defaultForbidden'];
      };
    };
  };
}

export type webhooks = Record<string, never>;

export interface components {
  schemas: {
    user: {
      id: number;
      /** Format: email */
      email: string;
      /** @enum {string} */
      status: 'active' | 'blocked';
      /** @enum {string} */
      role: 'user' | 'admin' | 'super-admin';
    };
    defaultSuccessResponse: {
      /** @enum {boolean} */
      success: true;
      data: Record<string, never>;
    };
    defaultNotAuthorizedResponse: {
      /** @enum {boolean} */
      success: false;
      data: Record<string, never>;
      error: {
        /** @enum {integer} */
        code: 9;
        /** @enum {string} */
        description: 'Пользователь не авторизован';
      };
    };
    defaultForbiddenResponse: {
      /** @enum {boolean} */
      success: false;
      data: Record<string, never>;
      error: {
        /** @enum {integer} */
        code: 10;
        /** @enum {string} */
        description: 'Недостаточно прав';
      };
    };
    sessionsGetCurrentSessionSuccessResponse: {
      /** @enum {boolean} */
      success: true;
      data: {
        user: components['schemas']['user'];
        session: {
          id: number;
        };
      };
    };
    sessionsGetAllSessionSuccessResponse: {
      /** @enum {boolean} */
      success: true;
      data: {
        sessions: {
            id: number;
            userId: number;
          }[];
        limit: number;
        offset: number;
        total: number;
      };
    };
    sessionsCreateSessionBodyRequest: {
      email: string;
      password: string;
    };
    sessionsCreateSessionSuccessResponse: {
      /** @enum {boolean} */
      success: true;
      data: {
        user: components['schemas']['user'];
        session: {
          id: number;
        };
      };
    };
    sessionsCreateSessionWrongDataResponse: {
      /** @enum {boolean} */
      success: false;
      data: Record<string, never>;
      error: {
        /** @enum {integer} */
        code: 6;
        /** @enum {string} */
        description: 'Email или пароль указаны неверно';
      };
    };
    sessionDeleteSessionErrorResponse: {
      /** @enum {boolean} */
      success: false;
      data: Record<string, never>;
      error: {
        /** @enum {integer} */
        code: 4 | 3;
        /** @enum {string} */
        description: 'Сессия не найдена' | '"id" must be a number';
      };
    };
  };
  responses: {
    /** @description Стандартный ответ при успешно выполенном запросе */
    defaultSuccess: {
      content: {
        'application/json': components['schemas']['defaultSuccessResponse'];
      };
    };
    /** @description Пользователь не авторизован */
    defaultNotAuthorized: {
      content: {
        'application/json': components['schemas']['defaultNotAuthorizedResponse'];
      };
    };
    /** @description Недостаточно прав */
    defaultForbidden: {
      content: {
        'application/json': components['schemas']['defaultForbiddenResponse'];
      };
    };
    /** @description Успешное получение информации о сессии пользователя */
    sessionsGetCurrentSessionSuccess: {
      content: {
        'application/json': components['schemas']['sessionsGetCurrentSessionSuccessResponse'];
      };
    };
    /** @description Успешное получение списка сессий */
    sessionsGetAllSessionSuccessResponse: {
      content: {
        'application/json': components['schemas']['sessionsGetAllSessionSuccessResponse'];
      };
    };
    /** @description Успешное создание сессии пользователя */
    sessionsCreateSessionSuccessResponse: {
      content: {
        'application/json': components['schemas']['sessionsCreateSessionSuccessResponse'];
      };
    };
    /** @description Ошибка при создании сессии */
    sessionsCreateSessionWrongData: {
      content: {
        'application/json': components['schemas']['sessionsCreateSessionWrongDataResponse'];
      };
    };
    /** @description Сессия с переданным id не найдена */
    sessionDeleteSessionError: {
      content: {
        'application/json': components['schemas']['sessionDeleteSessionErrorResponse'];
      };
    };
  };
  parameters: {
    /** @description Id сущности */
    defaultId: number;
    /** @description Максимальное количество элементов в ответе */
    limitParameter?: number;
    /** @description Отступ, начиная с которого нужно возвращать элементы */
    offsetParameter?: number;
  };
  requestBodies: {
    /** @description Логин и пароль для входа в приложение */
    sessionsCreateSessionBodyRequest?: {
      content: {
        'application/json': components['schemas']['sessionsCreateSessionBodyRequest'];
      };
    };
  };
  headers: never;
  pathItems: never;
}

export type $defs = Record<string, never>;

export type external = Record<string, never>;

export type operations = Record<string, never>;
